{
  "swagger": "2.0",
  "info": {
    "description": "RestFul API with TypeScript, TypeORM and JWT",
    "version": "1.0.0",
    "title": "Orbita Challenge API",
    "contact": {
      "email": "marciondb@gmail.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "host": "http://localhost:3333",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Auth",
      "description": "Access to API"
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ],
  "schemes": ["http"],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/user": {
      "post": {
        "tags": ["user"],
        "summary": "Create user",
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "User Json Object"
          }
        }
      },
      "get": {
        "tags": ["user"],
        "summary": "List All User",
        "description": "This can only be done by the logged in user.",
        "operationId": "listAllUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "description": "get all users",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "default": {
            "description": "Array of User"
          }
        }
      }
    },
    "/user/{id}": {
      "get": {
        "tags": ["user"],
        "summary": "Get user by user id",
        "description": "This can only be done by the logged in user.",
        "operationId": "getUserById",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be fetched. Use 1 for testing.",
            "required": true,
            "type": "number"
          }
        ],
        "responses": {
          "201": {
            "description": "User Object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid(s) field(s) supplied"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "user email already in use"
          }
        }
      },
      "patch": {
        "tags": ["user"],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id that need to be updated",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User Object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid user supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "tags": ["user"],
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id that needs to be deleted",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "User Object",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "bearerAuth",
      "in": "header",
      "scheme": "bearer",
      "description": "Enter your bearer token in the format **Bearer &lt;token>**"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "state_id": {
          "type": "integer",
          "format": "int64",
          "description": "User State Id"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "MÃ¡rcio Dias",
    "url": "https://www.linkedin.com/in/marciondb/"
  }
}
